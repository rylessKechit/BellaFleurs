// src/app/api/products/[id]/route.ts - Version alternative si la premi√®re ne marche pas
export const dynamic = 'force-dynamic';

import { NextRequest, NextResponse } from 'next/server';
import connectDB from '@/lib/mongodb';
import Product from '@/models/Product';
import { formatProductResponse } from '@/lib/utils/formatProductResponse';

// GET /api/products/[id] - R√©cup√©rer un produit par ID ou slug
export async function GET(request: NextRequest) {
  try {
    await connectDB();
    
    // üîß ALTERNATIVE : Extraire l'ID depuis l'URL directement
    const url = new URL(request.url);
    const pathParts = url.pathname.split('/');
    const id = pathParts[pathParts.length - 1]; // Dernier segment de l'URL
    
    console.log('üîç URL compl√®te:', request.url);
    console.log('üîç Segments du path:', pathParts);
    console.log('üîç ID extrait:', id);
    
    if (!id || id === 'undefined' || id === 'null' || id === 'products') {
      console.error('‚ùå ID manquant ou invalide:', id);
      return NextResponse.json({
        success: false,
        error: {
          message: 'ID produit requis',
          code: 'MISSING_PRODUCT_ID'
        }
      }, { status: 400 });
    }

    // Chercher par ID MongoDB ou par slug
    let product;
    
    // V√©rifier si c'est un ObjectId valide (24 caract√®res hexad√©cimaux)
    const isValidObjectId = /^[0-9a-fA-F]{24}$/.test(id);
    
    console.log('üîç Type de recherche:', isValidObjectId ? 'ObjectId' : 'Slug');
    console.log('üîç Valeur √† rechercher:', id);
    
    if (isValidObjectId) {
      // Recherche par ID MongoDB
      console.log('üîç Recherche par ObjectId:', id);
      product = await Product.findById(id).lean();
    } else {
      // Recherche par slug
      console.log('üîç Recherche par slug:', id);
      product = await Product.findOne({ slug: id }).lean();
    }

    console.log('üîç Produit trouv√©:', product ? 'OUI' : 'NON');
    
    if (!product) {
      console.error('‚ùå Produit introuvable avec ID/slug:', id);
      
      // üîß DEBUG : Lister quelques produits pour v√©rifier
      const existingProducts = await Product.find({}, 'name slug _id').limit(5).lean();
      console.log('üîç Exemples de produits existants:', existingProducts);
      
      return NextResponse.json({
        success: false,
        error: {
          message: 'Produit introuvable',
          code: 'PRODUCT_NOT_FOUND'
        }
      }, { status: 404 });
    }

    console.log('‚úÖ Produit trouv√©:', product.name);

    // üîß CORRECTION : Utiliser le formateur unifi√©
    const formattedProduct = formatProductResponse(product);

    console.log('‚úÖ Produit format√© avec hasVariants:', formattedProduct.hasVariants);

    return NextResponse.json({
      success: true,
      data: formattedProduct
    });

  } catch (error: unknown) {
    console.error('‚ùå Product GET error:', error);
    
    return NextResponse.json({
      success: false,
      error: {
        message: 'Erreur lors de la r√©cup√©ration du produit',
        code: 'PRODUCT_FETCH_ERROR'
      }
    }, { status: 500 });
  }
}