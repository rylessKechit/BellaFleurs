// src/lib/email.ts - Version avec design moderne
import nodemailer from 'nodemailer';

// Interface pour les options d'email
interface EmailOptions {
  to: string;
  subject: string;
  text?: string;
  html?: string;
  from?: string;
}

// Configuration du transporteur email
const createTransporter = () => {
  const requiredEnvVars = [
    'EMAIL_SERVER_HOST',
    'EMAIL_SERVER_PORT', 
    'EMAIL_SERVER_USER',
    'EMAIL_SERVER_PASSWORD'
  ];

  const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
  
  if (missingVars.length > 0) {
    console.warn(`‚ö†Ô∏è Variables d'environnement manquantes pour l'email: ${missingVars.join(', ')}`);
    return null;
  }

  return nodemailer.createTransport({
    host: process.env.EMAIL_SERVER_HOST,
    port: parseInt(process.env.EMAIL_SERVER_PORT || '587'),
    secure: process.env.EMAIL_SERVER_PORT === '465',
    auth: {
      user: process.env.EMAIL_SERVER_USER,
      pass: process.env.EMAIL_SERVER_PASSWORD,
    },
    tls: {
      rejectUnauthorized: false
    }
  });
};

// Fonction principale d'envoi d'email
export async function sendEmail(options: EmailOptions): Promise<boolean> {
  try {
    const transporter = createTransporter();
    
    if (!transporter) {
      console.error('‚ùå Impossible de cr√©er le transporteur email - variables d\'environnement manquantes');
      return false;
    }

    const emailOptions = {
      from: options.from || process.env.EMAIL_FROM || process.env.EMAIL_SERVER_USER,
      to: options.to,
      subject: options.subject,
      text: options.text,
      html: options.html || generateModernHTML(options.subject, options.text || '')
    };

    const info = await transporter.sendMail(emailOptions);
    
    console.log('‚úÖ Email envoy√©:', {
      to: options.to,
      subject: options.subject,
      messageId: info.messageId
    });
    
    return true;

  } catch (error: any) {
    console.error('‚ùå Erreur envoi email:', {
      error: error.message,
      code: error.code,
      to: options.to,
      subject: options.subject
    });
    return false;
  }
}

// Template HTML moderne et responsive
function generateModernHTML(subject: string, text: string): string {
  return `
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${subject}</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            line-height: 1.6;
            color: #333333;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            padding: 20px 0;
        }
        
        .email-container {
            max-width: 600px;
            margin: 0 auto;
            background: #ffffff;
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }
        
        .header {
            background: linear-gradient(135deg, #16a34a 0%, #22c55e 100%);
            color: white;
            padding: 40px 30px;
            text-align: center;
            position: relative;
        }
        
        .header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="flower" patternUnits="userSpaceOnUse" width="20" height="20"><circle cx="10" cy="10" r="2" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23flower)"/></svg>');
            opacity: 0.3;
        }
        
        .logo {
            font-size: 28px;
            font-weight: bold;
            margin-bottom: 8px;
            position: relative;
            z-index: 2;
        }
        
        .tagline {
            font-size: 16px;
            opacity: 0.9;
            position: relative;
            z-index: 2;
        }
        
        .content {
            padding: 40px 30px;
            background: white;
        }
        
        .content p {
            margin-bottom: 16px;
            font-size: 16px;
            line-height: 1.7;
        }
        
        .highlight-box {
            background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
            border-left: 4px solid #16a34a;
            padding: 20px;
            margin: 24px 0;
            border-radius: 8px;
        }
        
        .button {
            display: inline-block;
            background: linear-gradient(135deg, #16a34a 0%, #22c55e 100%);
            color: white;
            padding: 14px 28px;
            text-decoration: none;
            border-radius: 8px;
            font-weight: 600;
            text-align: center;
            transition: transform 0.2s ease;
        }
        
        .button:hover {
            transform: translateY(-2px);
        }
        
        .status-badge {
            display: inline-block;
            background: #16a34a;
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 600;
            margin: 10px 0;
        }
        
        .footer {
            background: #f8fafc;
            padding: 30px;
            text-align: center;
            border-top: 1px solid #e2e8f0;
        }
        
        .footer-logo {
            font-size: 20px;
            font-weight: bold;
            color: #16a34a;
            margin-bottom: 8px;
        }
        
        .contact-info {
            color: #64748b;
            font-size: 14px;
            margin-top: 16px;
        }
        
        .social-links {
            margin: 20px 0;
        }
        
        .social-links a {
            display: inline-block;
            margin: 0 8px;
            color: #16a34a;
            text-decoration: none;
            font-size: 14px;
        }
        
        @media (max-width: 600px) {
            .email-container { margin: 0 10px; }
            .header, .content, .footer { padding: 20px; }
            .logo { font-size: 24px; }
            .tagline { font-size: 14px; }
            .content p { font-size: 14px; }
        }
    </style>
</head>
<body>
    <div class="email-container">
        <div class="header">
            <div class="logo">üå∏ Bella Fleurs</div>
            <div class="tagline">Cr√©ations florales d'exception √† Br√©tigny-sur-Orge</div>
        </div>
        
        <div class="content">
            ${text.split('\n').map(line => {
                const trimmed = line.trim();
                if (!trimmed) return '';
                
                // D√©tection du statut pour stylisation sp√©ciale
                if (trimmed.includes('en cours de cr√©ation') || trimmed.includes('pr√™te') || 
                    trimmed.includes('livraison') || trimmed.includes('livr√©e')) {
                    return `<div class="highlight-box"><p>${trimmed}</p></div>`;
                }
                
                return `<p>${trimmed}</p>`;
            }).filter(p => p).join('')}
        </div>
        
        <div class="footer">
            <div class="footer-logo">Bella Fleurs</div>
            <p style="color: #64748b; margin-bottom: 16px;">
                Votre fleuriste de confiance √† Br√©tigny-sur-Orge
            </p>
            
            <div class="social-links">
                <a href="#">Facebook</a> ‚Ä¢ 
                <a href="#">Instagram</a> ‚Ä¢ 
                <a href="#">Nous contacter</a>
            </div>
            
            <div class="contact-info">
                <p>Cr√©ations uniques ‚Ä¢ Livraison locale ‚Ä¢ Service personnalis√©</p>
                <p style="margin-top: 10px; font-size: 12px; color: #94a3b8;">
                    Vous recevez cet email car vous avez pass√© commande chez Bella Fleurs
                </p>
            </div>
        </div>
    </div>
</body>
</html>
  `;
}

// Email de notification de nouvelle commande pour l'admin
export async function sendNewOrderNotification(order: any): Promise<boolean> {
  const adminEmail = process.env.ADMIN_EMAIL || 'admin@bellafleurs.fr';
  
  const subject = `üîî Nouvelle commande ${order.orderNumber}`;
  const html = generateAdminOrderHTML(order);
  
  return await sendEmail({
    to: adminEmail,
    subject,
    html
  });
}

// Email de changement de statut pour le client
export async function sendOrderStatusEmail(order: any, newStatus: string, note?: string): Promise<boolean> {
  const templates = {
    'en_creation': {
      subject: 'üå∏ Votre commande est en cours de cr√©ation',
      content: `
Bonjour ${order.customerInfo.name},

Nous avons le plaisir de vous informer que votre commande ${order.orderNumber} est maintenant en cours de cr√©ation.

Nos fleuristes exp√©riment√©s travaillent avec passion et minutie pour composer votre magnifique cr√©ation florale selon vos souhaits.

${note ? `Message personnalis√© de nos fleuristes : ${note}` : ''}

Nous vous tiendrons inform√©(e) d√®s que votre commande sera pr√™te.

Merci de votre confiance,
L'√©quipe Bella Fleurs
      `
    },
    'pr√™te': {
      subject: '‚úÖ Votre commande est pr√™te !',
      content: `
Bonjour ${order.customerInfo.name},

Excellente nouvelle ! Votre commande ${order.orderNumber} est maintenant pr√™te et vous attend.

${order.deliveryInfo.type === 'pickup' 
  ? 'Vous pouvez venir la r√©cup√©rer en boutique pendant nos horaires d\'ouverture. Nous avons h√¢te de vous la pr√©senter !' 
  : `Votre livraison est programm√©e pour le ${new Date(order.deliveryInfo.date).toLocaleDateString('fr-FR')}. Nous nous occuperons de tout !`
}

${note ? `Message sp√©cial de nos fleuristes : ${note}` : ''}

Notre √©quipe a mis tout son savoir-faire pour cr√©er une composition qui, nous l'esp√©rons, vous √©merveillera.

√Ä tr√®s bient√¥t,
L'√©quipe Bella Fleurs
      `
    },
    'en_livraison': {
      subject: 'üöö Votre commande est en route !',
      content: `
Bonjour ${order.customerInfo.name},

Votre commande ${order.orderNumber} est actuellement en cours de livraison.

Notre √©quipe de livraison se dirige vers vous avec vos magnifiques fleurs fra√Æches, pr√©par√©es avec le plus grand soin.

Merci de vous assurer d'√™tre disponible √† l'adresse indiqu√©e pour r√©ceptionner votre commande.

${note ? `Information de livraison : ${note}` : ''}

Plus que quelques instants avant que vous puissiez profiter de votre cr√©ation florale !

L'√©quipe Bella Fleurs
      `
    },
    'livr√©e': {
      subject: 'üéâ Votre commande a √©t√© livr√©e avec succ√®s !',
      content: `
Bonjour ${order.customerInfo.name},

Nous avons le plaisir de vous confirmer que votre commande ${order.orderNumber} a √©t√© livr√©e avec succ√®s !

Nous esp√©rons sinc√®rement que nos cr√©ations florales vous apportent joie, beaut√© et bonheur dans votre quotidien.

${note ? `Message de notre √©quipe : ${note}` : ''}

N'h√©sitez pas √† partager une photo de votre bouquet sur nos r√©seaux sociaux ! Nous adorons voir nos cr√©ations dans leur nouvel environnement.

Votre satisfaction est notre plus belle r√©compense. Si vous souhaitez nous laisser un avis, cela nous ferait √©norm√©ment plaisir.

Merci de votre confiance et √† bient√¥t pour de nouvelles cr√©ations florales !

L'√©quipe Bella Fleurs

P.S. : Pensez √† Bella Fleurs pour toutes vos prochaines occasions sp√©ciales ! üå∏
      `
    },
    'annul√©e': {
      subject: '‚ùå Votre commande a √©t√© annul√©e',
      content: `
Bonjour ${order.customerInfo.name},

Nous vous informons que votre commande ${order.orderNumber} a √©t√© annul√©e.

${note ? `Motif : ${note}` : 'Si vous avez des questions concernant cette annulation, n\'h√©sitez pas √† nous contacter.'}

Si un paiement a √©t√© effectu√©, il sera automatiquement rembours√© dans les plus brefs d√©lais.

Nous restons √† votre disposition pour toute nouvelle commande ou pour r√©pondre √† vos questions.

Cordialement,
L'√©quipe Bella Fleurs
      `
    }
  };

  const template = templates[newStatus as keyof typeof templates];
  if (!template) {
    console.warn(`‚ö†Ô∏è Pas de template email pour le statut: ${newStatus}`);
    return false;
  }

  const html = generateModernHTML(template.subject, template.content);

  return await sendEmail({
    to: order.customerInfo.email,
    subject: template.subject,
    html
  });
}

// Email de confirmation de commande
export async function sendOrderConfirmation(order: any): Promise<boolean> {
  const subject = `‚úÖ Confirmation de commande ${order.orderNumber}`;
  
  const content = `
Bonjour ${order.customerInfo.name},

Merci infiniment pour votre commande chez Bella Fleurs !

Votre commande ${order.orderNumber} a bien √©t√© enregistr√©e et le paiement a √©t√© confirm√©.

R√âCAPITULATIF DE VOTRE COMMANDE :

Articles command√©s :
${order.items.map((item: any) => `‚Ä¢ ${item.name} (x${item.quantity}) - ${(item.price * item.quantity).toFixed(2)}‚Ç¨`).join('\n')}

TOTAL : ${order.totalAmount.toFixed(2)}‚Ç¨

SERVICE CHOISI :
${order.deliveryInfo.type === 'delivery' ? 'üöö Livraison' : 'üè™ Retrait en boutique'}
üìÖ Date pr√©vue : ${new Date(order.deliveryInfo.date).toLocaleDateString('fr-FR')}

${order.deliveryInfo.type === 'delivery' && order.deliveryInfo.address ? 
  `üìç Adresse de livraison :
${order.deliveryInfo.address.street}
${order.deliveryInfo.address.zipCode} ${order.deliveryInfo.address.city}` : 
  'üìç √Ä r√©cup√©rer en boutique'
}

${order.deliveryInfo.notes ? `üí¨ Vos notes : ${order.deliveryInfo.notes}` : ''}

PROCHAINES √âTAPES :
1. Nous commen√ßons imm√©diatement la pr√©paration de votre commande
2. Vous recevrez une notification d√®s qu'elle sera pr√™te
3. ${order.deliveryInfo.type === 'delivery' ? 'Nous proc√©derons √† la livraison' : 'Vous pourrez venir la r√©cup√©rer'}

Vous pouvez suivre l'√©tat d'avancement de votre commande √† tout moment en vous connectant √† votre compte.

Merci de votre confiance. Nos fleuristes ont h√¢te de cr√©er pour vous une composition exceptionnelle !

Bien √† vous,
L'√©quipe Bella Fleurs
  `;

  const html = generateModernHTML(subject, content);

  return await sendEmail({
    to: order.customerInfo.email,
    subject,
    html
  });
}

// Template sp√©cial pour les notifications admin
function generateAdminOrderHTML(order: any): string {
  return `
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nouvelle commande ${order.orderNumber}</title>
    <style>
        body { font-family: Arial, sans-serif; color: #333; background: #f4f4f4; margin: 0; padding: 20px; }
        .container { max-width: 600px; margin: 0 auto; background: white; border-radius: 8px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
        .header { background: #dc2626; color: white; padding: 20px; text-align: center; }
        .content { padding: 30px; }
        .order-info { background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 15px 0; }
        .items { background: #fff8dc; padding: 15px; border-radius: 5px; margin: 15px 0; }
        .important { color: #dc2626; font-weight: bold; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîî NOUVELLE COMMANDE</h1>
            <p>Commande ${order.orderNumber}</p>
        </div>
        
        <div class="content">
            <div class="order-info">
                <h3>INFORMATIONS CLIENT</h3>
                <p><strong>Nom :</strong> ${order.customerInfo.name}</p>
                <p><strong>Email :</strong> ${order.customerInfo.email}</p>
                <p><strong>T√©l√©phone :</strong> ${order.customerInfo.phone}</p>
            </div>
            
            <div class="items">
                <h3>ARTICLES COMMAND√âS</h3>
                ${order.items.map((item: any) => `
                <p>‚Ä¢ ${item.name} (x${item.quantity}) - ${(item.price * item.quantity).toFixed(2)}‚Ç¨</p>
                `).join('')}
                <p class="important">TOTAL : ${order.totalAmount.toFixed(2)}‚Ç¨</p>
            </div>
            
            <div class="order-info">
                <h3>LIVRAISON</h3>
                <p><strong>Type :</strong> ${order.deliveryInfo.type === 'delivery' ? 'Livraison √† domicile' : 'Retrait en boutique'}</p>
                <p><strong>Date pr√©vue :</strong> ${new Date(order.deliveryInfo.date).toLocaleDateString('fr-FR')}</p>
                ${order.deliveryInfo.address ? `
                <p><strong>Adresse :</strong><br>
                ${order.deliveryInfo.address.street}<br>
                ${order.deliveryInfo.address.zipCode} ${order.deliveryInfo.address.city}</p>
                ` : ''}
                ${order.deliveryInfo.notes ? `<p><strong>Notes :</strong> ${order.deliveryInfo.notes}</p>` : ''}
            </div>
            
            <p style="text-align: center; margin-top: 30px;">
                <strong>üå∏ Connectez-vous √† votre dashboard pour traiter cette commande üå∏</strong>
            </p>
        </div>
    </div>
</body>
</html>
  `;
}

// Test de configuration email
export async function testEmailConfiguration(): Promise<boolean> {
  const testEmail = process.env.EMAIL_SERVER_USER;
  
  if (!testEmail) {
    console.error('‚ùå Pas d\'email de test configur√©');
    return false;
  }

  const content = `
Test de configuration email r√©ussi !

Cette email confirme que le service d'envoi d'emails de Bella Fleurs fonctionne correctement.

Configuration test√©e le : ${new Date().toLocaleDateString('fr-FR')} √† ${new Date().toLocaleTimeString('fr-FR')}

Variables d'environnement v√©rifi√©es :
‚Ä¢ EMAIL_SERVER_HOST : ${process.env.EMAIL_SERVER_HOST}
‚Ä¢ EMAIL_SERVER_PORT : ${process.env.EMAIL_SERVER_PORT}  
‚Ä¢ EMAIL_SERVER_USER : ${process.env.EMAIL_SERVER_USER?.substring(0, 3)}***
‚Ä¢ EMAIL_FROM : ${process.env.EMAIL_FROM}

L'√©quipe technique Bella Fleurs
  `;

  const html = generateModernHTML('üß™ Test Email - Bella Fleurs', content);

  return await sendEmail({
    to: testEmail,
    subject: 'üß™ Test de configuration email - Bella Fleurs',
    html
  });
}