// src/lib/email.ts
import nodemailer from 'nodemailer';

// Interface pour les options d'email
interface EmailOptions {
  to: string;
  subject: string;
  text?: string;
  html?: string;
  from?: string;
}

// Configuration du transporteur email
const createTransporter = () => {
  // V√©rifier si toutes les variables d'environnement sont d√©finies
  const requiredEnvVars = [
    'EMAIL_SERVER_HOST',
    'EMAIL_SERVER_PORT', 
    'EMAIL_SERVER_USER',
    'EMAIL_SERVER_PASSWORD'
  ];

  const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
  
  if (missingVars.length > 0) {
    console.warn(`‚ö†Ô∏è Variables d'environnement manquantes pour l'email: ${missingVars.join(', ')}`);
    return null;
  }

  return nodemailer.createTransport({
    host: process.env.EMAIL_SERVER_HOST,
    port: parseInt(process.env.EMAIL_SERVER_PORT || '587'),
    secure: process.env.EMAIL_SERVER_PORT === '465', // true pour 465, false pour autres ports
    auth: {
      user: process.env.EMAIL_SERVER_USER,
      pass: process.env.EMAIL_SERVER_PASSWORD,
    },
    tls: {
      // Ne pas √©chouer sur des certificats invalides
      rejectUnauthorized: false
    }
  });
};

// Fonction principale d'envoi d'email
export async function sendEmail(options: EmailOptions): Promise<boolean> {
  try {
    const transporter = createTransporter();
    
    if (!transporter) {
      console.error('‚ùå Impossible de cr√©er le transporteur email - variables d\'environnement manquantes');
      return false;
    }

    // Configuration par d√©faut
    const emailOptions = {
      from: options.from || process.env.EMAIL_FROM || process.env.EMAIL_SERVER_USER,
      to: options.to,
      subject: options.subject,
      text: options.text,
      html: options.html || generateHTML(options.subject, options.text || '')
    };

    // Envoyer l'email
    const info = await transporter.sendMail(emailOptions);
    
    console.log('‚úÖ Email envoy√©:', {
      to: options.to,
      subject: options.subject,
      messageId: info.messageId
    });
    
    return true;

  } catch (error: any) {
    console.error('‚ùå Erreur envoi email:', {
      error: error.message,
      to: options.to,
      subject: options.subject
    });
    return false;
  }
}

// Fonction pour g√©n√©rer le HTML √† partir du texte
function generateHTML(subject: string, text: string): string {
  return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${subject}</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f9f9f9;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 2px solid #16a34a;
        }
        .logo {
            font-size: 24px;
            font-weight: bold;
            color: #16a34a;
            margin-bottom: 10px;
        }
        .content {
            margin-bottom: 30px;
        }
        .footer {
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #eee;
            text-align: center;
            font-size: 14px;
            color: #666;
        }
        .contact-info {
            margin-top: 15px;
            font-size: 12px;
            color: #888;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">üå∏ Bella Fleurs</div>
            <div style="color: #666;">Cr√©ations florales d'exception √† Br√©tigny-sur-Orge</div>
        </div>
        
        <div class="content">
            ${text.split('\n').map(line => `<p>${line}</p>`).join('')}
        </div>
        
        <div class="footer">
            <p><strong>Bella Fleurs</strong><br>
            Votre fleuriste de confiance √† Br√©tigny-sur-Orge</p>
            
            <div class="contact-info">
                <p>Cr√©ations uniques ‚Ä¢ Livraison locale ‚Ä¢ Service personnalis√©</p>
            </div>
        </div>
    </div>
</body>
</html>
  `;
}

// Fonctions sp√©cialis√©es pour les diff√©rents types d'emails

// Email de notification de nouvelle commande pour l'admin
export async function sendNewOrderNotification(order: any): Promise<boolean> {
  const adminEmail = process.env.ADMIN_EMAIL || 'admin@bellafleurs.fr';
  
  const subject = `üîî Nouvelle commande ${order.orderNumber}`;
  const text = `
Nouvelle commande re√ßue !

Num√©ro de commande: ${order.orderNumber}
Client: ${order.customerInfo.name}
Email: ${order.customerInfo.email}
T√©l√©phone: ${order.customerInfo.phone}
Montant total: ${order.totalAmount.toFixed(2)}‚Ç¨

Type de service: ${order.deliveryInfo.type === 'delivery' ? 'Livraison' : 'Retrait en boutique'}
Date pr√©vue: ${new Date(order.deliveryInfo.date).toLocaleDateString('fr-FR')}

${order.deliveryInfo.type === 'delivery' && order.deliveryInfo.address ? 
  `Adresse de livraison:
${order.deliveryInfo.address.street}
${order.deliveryInfo.address.zipCode} ${order.deliveryInfo.address.city}` : 
  'Retrait en boutique'
}

Articles command√©s:
${order.items.map((item: any) => `- ${item.name} (x${item.quantity}) - ${(item.price * item.quantity).toFixed(2)}‚Ç¨`).join('\n')}

${order.deliveryInfo.notes ? `Notes du client: ${order.deliveryInfo.notes}` : ''}

Connectez-vous √† votre dashboard pour g√©rer cette commande.
  `;

  return await sendEmail({
    to: adminEmail,
    subject,
    text
  });
}

// Email de changement de statut pour le client
export async function sendOrderStatusEmail(order: any, newStatus: string, note?: string): Promise<boolean> {
  const templates = {
    'en_cours_creation': {
      subject: 'üå∏ Votre commande Bella Fleurs est en cours de cr√©ation',
      text: `
Bonjour ${order.customerInfo.name},

Nous avons commenc√© la cr√©ation de votre magnifique commande ${order.orderNumber}.

Nos fleuristes travaillent avec soin pour composer votre bouquet selon vos souhaits.

Vous recevrez une nouvelle notification d√®s que votre commande sera pr√™te.

${note ? `Note de nos fleuristes: ${note}` : ''}

Merci de votre confiance,
L'√©quipe Bella Fleurs
      `
    },
    'pr√™te': {
      subject: '‚úÖ Votre commande Bella Fleurs est pr√™te !',
      text: `
Bonjour ${order.customerInfo.name},

Excellente nouvelle ! Votre commande ${order.orderNumber} est maintenant pr√™te.

${order.deliveryInfo.type === 'pickup' 
  ? 'Vous pouvez venir la r√©cup√©rer en boutique aux horaires d\'ouverture.'
  : `Nous pr√©parerons la livraison pour le ${new Date(order.deliveryInfo.date).toLocaleDateString('fr-FR')}.`
}

${note ? `Message de nos fleuristes: ${note}` : ''}

Nous avons h√¢te que vous d√©couvriez votre cr√©ation florale !

√Ä bient√¥t,
L'√©quipe Bella Fleurs
      `
    },
    'en_livraison': {
      subject: 'üöö Votre commande Bella Fleurs est en cours de livraison',
      text: `
Bonjour ${order.customerInfo.name},

Votre commande ${order.orderNumber} est actuellement en cours de livraison.

Notre √©quipe se rend chez vous avec vos magnifiques fleurs fra√Æches.

Merci de vous assurer d'√™tre disponible √† l'adresse indiqu√©e.

${note ? `Information de livraison: ${note}` : ''}

L'√©quipe Bella Fleurs
      `
    },
    'livr√©': {
      subject: 'üéâ Votre commande Bella Fleurs a √©t√© livr√©e !',
      text: `
Bonjour ${order.customerInfo.name},

Votre commande ${order.orderNumber} a √©t√© livr√©e avec succ√®s !

Nous esp√©rons que nos cr√©ations florales vous apportent joie et bonheur.

N'h√©sitez pas √† partager une photo sur nos r√©seaux sociaux et √† nous laisser un avis.

${note ? `Message de livraison: ${note}` : ''}

Merci de votre confiance et √† bient√¥t pour de nouvelles cr√©ations !

L'√©quipe Bella Fleurs

P.S. : Pour vos prochaines occasions sp√©ciales, pensez √† Bella Fleurs üå∏
      `
    }
  };

  const template = templates[newStatus as keyof typeof templates];
  if (!template) {
    console.warn(`‚ö†Ô∏è Pas de template email pour le statut: ${newStatus}`);
    return false;
  }

  return await sendEmail({
    to: order.customerInfo.email,
    subject: template.subject,
    text: template.text
  });
}

// Email de confirmation de commande
export async function sendOrderConfirmation(order: any): Promise<boolean> {
  const subject = `‚úÖ Confirmation de votre commande ${order.orderNumber}`;
  const text = `
Bonjour ${order.customerInfo.name},

Merci pour votre commande chez Bella Fleurs !

R√©capitulatif de votre commande ${order.orderNumber} :

Articles command√©s:
${order.items.map((item: any) => `- ${item.name} (x${item.quantity}) - ${(item.price * item.quantity).toFixed(2)}‚Ç¨`).join('\n')}

Total: ${order.totalAmount.toFixed(2)}‚Ç¨

Service choisi: ${order.deliveryInfo.type === 'delivery' ? 'Livraison' : 'Retrait en boutique'}
Date pr√©vue: ${new Date(order.deliveryInfo.date).toLocaleDateString('fr-FR')}

${order.deliveryInfo.type === 'delivery' && order.deliveryInfo.address ? 
  `Adresse de livraison:
${order.deliveryInfo.address.street}
${order.deliveryInfo.address.zipCode} ${order.deliveryInfo.address.city}` : 
  '√Ä r√©cup√©rer en boutique'
}

Nous commencerons la pr√©paration de votre commande sous peu et vous tiendrons inform√©(e) de son avancement.

Merci de votre confiance,
L'√©quipe Bella Fleurs
  `;

  return await sendEmail({
    to: order.customerInfo.email,
    subject,
    text
  });
}

// Test de configuration email
export async function testEmailConfiguration(): Promise<boolean> {
  const testEmail = process.env.EMAIL_SERVER_USER;
  
  if (!testEmail) {
    console.error('‚ùå Pas d\'email de test configur√©');
    return false;
  }

  return await sendEmail({
    to: testEmail,
    subject: 'üß™ Test de configuration email - Bella Fleurs',
    text: `
Test de configuration email r√©ussi !

Cette email confirme que le service d'envoi d'emails de Bella Fleurs fonctionne correctement.

Configuration test√©e le: ${new Date().toLocaleDateString('fr-FR')} √† ${new Date().toLocaleTimeString('fr-FR')}

L'√©quipe technique Bella Fleurs
    `
  });
}